{
  "comments": [
    {
      "key": {
        "uuid": "0224f825_9d34f532",
        "filename": "datafile-app-server/src/main/java/org/onap/dcaegen2/collectors/datafile/configuration/AppConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 5072
      },
      "writtenOn": "2019-08-06T12:25:36Z",
      "side": 1,
      "message": "I think this was better before. If the parsing fails, an error was logged (and this new configuration was ignored). \nNow there might be nullpointer exceptions when the configuration is used (and it might be very hard to understand why).",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 216,
        "endChar": 46
      },
      "revId": "5e450e1f41f88723994ed63aec92e63289d5a2e6",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "290b40ae_a1dda1e3",
        "filename": "datafile-app-server/src/main/java/org/onap/dcaegen2/collectors/datafile/configuration/AppConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 3763
      },
      "writtenOn": "2019-08-06T14:07:43Z",
      "side": 1,
      "message": "If I understand the CloudConfigParser::getDmaapConsumerConfig, CloudConfigParser::getDmaapPublisherConfigurations, and CloudConfigParser::getFtpesConfig methods correctly, they cannot return null. If something is incorrect in the configuration they will trow an exception. If this is not correct, then this if cluase should be here, but we need to create a test case with incorrect configurations to test this error handling.",
      "parentUuid": "0224f825_9d34f532",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 216,
        "endChar": 46
      },
      "revId": "5e450e1f41f88723994ed63aec92e63289d5a2e6",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c39a758_1964cda1",
        "filename": "datafile-app-server/src/main/java/org/onap/dcaegen2/collectors/datafile/configuration/AppConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 5072
      },
      "writtenOn": "2019-08-07T07:16:38Z",
      "side": 1,
      "message": "Do you really think you need to create a testcase that verifies one line of code that only logs an error?? In that case it is better like this. \nUnittests that only exists for the sake of code coverage is only making the SW harder to maintain.",
      "parentUuid": "290b40ae_a1dda1e3",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 216,
        "endChar": 46
      },
      "revId": "5e450e1f41f88723994ed63aec92e63289d5a2e6",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "736f9676_c64f2293",
        "filename": "datafile-app-server/src/main/java/org/onap/dcaegen2/collectors/datafile/model/logging/MappedDiagnosticContext.java",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 5072
      },
      "writtenOn": "2019-08-06T12:25:36Z",
      "side": 1,
      "message": "why not also remove this deprecated field?",
      "range": {
        "startLine": 53,
        "startChar": 7,
        "endLine": 53,
        "endChar": 74
      },
      "revId": "5e450e1f41f88723994ed63aec92e63289d5a2e6",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}